#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var pkg = require("../package.json");
var serverMain = require("../index");
var hid = require("node-hid");
var options = {};

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncrc file")
    .option("-p, --port <port>", "path or name of serial port")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option(
        "--socket-address <address>",
        "socket address or hostname (default: localhost)",
        "localhost"
    )
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option(
        "--controller-type <type>",
        "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
        "Grbl"
    )
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    );

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime
};

if (options.list) {
    serialport.list(function(err, ports) {
        if (err) {
            console.error(err);
            process.exit(1);
        }
        ports.forEach(function(port) {
            console.log(port.comName);
        });
    });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    },
    workflow: {
        state:{}
    },
    feeder: {
        status:{}
    },
    command: {
        running: false
    }
};

var kbdevent = {
    down: 0,
    left: 0,
    right: 0,
    up: 0,

    select: 0,
    start: 0,

    green_y: 0,
    blue_x: 0,
    yellow_b: 0,
    red_a: 0,

    shoulder_left: 0,
    shoulder_right: 0,

    // maybe unneeded
    extra: 0,
    repeating: 0, // If it is repating a movement
    can_repeat: 1, // If can repeat
    move: 1, // Actually move size
    default_move: 1 // change with green y or blue x
};


var createServer = function(options) {
    serverMain(options, function(err, socket) {
        // Grbl
        socket.on("Grbl:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Grbl:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on("Smoothie:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Smoothie:settings", function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on("TinyG:state", function(state) {
            store.controller.state = state;
        });
        socket.on("TinyG:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on("sender:status", function(data) {
            store.sender.status = data;
        });

        socket.on("feeder:status", function(data) {
            store.feeder.status = data;
        });

        socket.on("workflow:state", function(data) {
            store.workflow.state = data;
        });

        socket.on('serialport:read', function(data) {
            response = (data || '').trim()
            if (response === 'ok') {
                store.command.running = false;
            }
            else {
                console.log(response)
                store.command.running = false;

            }
        });

        socket.on('serialport:write', function(data) {
            response = (data || '').trim()
            store.command.running = true;
        });

        const findPath = interface =>
            hid
                .devices()
                .find(
                    item =>
                        item.vendorId === 121 &&
                        item.productId === 294 &&
                        item.interface === 0
                ).path;

        console.log("Keyboard HID Address:", findPath(0), " & ", findPath(1));
        var keyboard_main = new hid.HID(findPath(0));
        var keyboard_extra = new hid.HID(findPath(1));

        var counter = 0;

        keyboard_main.on("data", function(data) {
            var recv = data.toJSON().data;
            var bits = recv.shift();
            kbdevent.down = recv[9] !== 0
            kbdevent.left = recv[7] !== 0
            kbdevent.right = recv[6] !== 0
            kbdevent.up = recv[8] !== 0

            kbdevent.green_y = recv[13] !== 0
            kbdevent.blue_x = recv[10] !== 0
            kbdevent.yellow_b = recv[12] !== 0
            kbdevent.red_a = recv[11] !== 0

            kbdevent.shoulder_left = recv[14] !== 0
            kbdevent.shoulder_right = recv[15] !== 0

            kbdevent.repeating = 0;
            // if (counter > 75) {
            //     sendToController();
            //     counter = 0;
            // }

            if (store.command.running === false) {
                if (counter > 30) {
                    sendToController();
                    counter = 0;
                }
            }
            // else {
            //     console.log('command running. waiting')
            // }
            // setTimeout(sendToController, 1500);
            // console.log('event:', recv);
            // console.log('mapping', kbdevent)
            counter +=1;
            // console.log(counter)
        });

        keyboard_extra.on("data", function(data) {
            var recv = data.toJSON().data;
            recv.shift();
            kbdevent.extra = recv.shift();

            kbdevent.select = kbdevent.extra === 1
            kbdevent.start = kbdevent.extra === 2

            kbdevent.repeating = 0;
            // sendToController();
        });

        function sendToController() {
            // Calculate move size modifiers
            kbdevent.move = kbdevent.default_move;
            if (kbdevent.green_y) {
                kbdevent.move = 0.5;
            } else if (
                kbdevent.blue_x 

            ) {
                kbdevent.move = 10;
            }


            // only execute some of the commands while the machine is idle
            if (store['controller']['state']['status']['activeState'] === 'Idle' || store['controller']['state']['status']['activeState'] === 'Jog') {
                if (kbdevent.up) {
                    socket.emit(
                        "write",
                        options.port,
                        "$J= F500 G91 Y" + kbdevent.move + ";\n",
                    );
                }
                if (kbdevent.down) {
                    socket.emit(
                        "write",
                        options.port,
                        "$J= F500 G91 Y-" + kbdevent.move + ";\n"
                    );
                }

                if (kbdevent.left) {
                    socket.emit(
                        "write",
                        options.port,
                        "$J= F500 G91 X-" + kbdevent.move + ";\n"
                    );
                }

                if (kbdevent.right) {
                    socket.emit(
                        "write",
                        options.port,
                        "$J= F500 G91 X" + kbdevent.move + ";\n"
                    );
                }

                if (kbdevent.shoulder_left) {
                    socket.emit(
                        "write",
                        options.port,
                        "$J= F250 G91 Z-" + kbdevent.move + ";\n"
                    );
                }

                if (kbdevent.shoulder_right) {
                    socket.emit(
                        "write",
                        options.port,
                        "$J= F250 G91 Z" + kbdevent.move + ";\n"
                    );
                }

                // homing
                if (kbdevent.yellow_b) {
                    socket.emit(
                        "write",
                        options.port,
                        "$H \n"
                    );
                }

                    
                // zero out work offsets
                if (kbdevent.select) {
                    socket.emit(
                        "write",
                        options.port,
                        "G10 L20 P1 Y0 \n G10 L20 P1 X0\n"
                    );
                }
            }
            else {
                console.log('machine not idle or jogging. activeState is', store['controller']['state']['status']['activeState'])
            }

            if (kbdevent.yellow_b
                ){
                socket.emit("homing", options.port);
            }

            // see https://github.com/cncjs/cncjs-controller/blob/master/src/controller.js#L213

            //     kbdevent.key != 40 && // Key: Enter / OK -- change repeat function
            //     kbdevent.extra != 148 // Special Key: Home -- goto Zero-working position

            if ((kbdevent.extra || kbdevent.key) && kbdevent.can_repeat
            ) {
                if (!kbdevent.repeating) {
                    kbdevent.repeating = 1;
                    setTimeout(sendToController, 1000);
                } else {
                    setTimeout(sendToController, 150);
                }
            }
            else {
                kbdevent.repeating = 0;
            }

            //console.log(store['controller']['state']['status']['activeState'])
            // console.log(store.sender.status)
            // console.log(store.feeder.status)


        }
    });
};

// console.log('List of connected devices (paths): ');
// console.log('devices:', hid.devices());

if (options.port) {
    createServer(options);
    return;
}

serialport.list(function(err, ports) {
    if (err) {
        console.error(err);
        process.exit(1);
    }
    const choices = ports.map(function(port) {
        return port.comName;
    });

    inquirer
        .prompt([
            {
                type: "list",
                name: "port",
                message: "Specify which port you want to use?",
                choices: choices
            }
        ])
        .then(function(answers) {
            options.port = answers.port;

            createServer(options);
        });
});
